class Shadow{constructor(a,b,c,d){this.shadows=[{x:-10,y:-10,blur:15,spread:0,color:"rgba(255,255,255,0.5)",inset:!1},{x:10,y:10,blur:15,spread:0,color:"rgba(70,70,70,0.12)",inset:!1}],this.backgroundColor="#ececec",this.form_element=a,this.css_element=b,this.shadow_elements=c;for(const[e,f]of Object.entries(d))null!=f&&(this[e]=f);this.render_form(),this.render_shadows(),this.generate_css()}render_form(){var a=this.shadows.reduce(function(a,b,c){return a+=`
            <div class="card" oninput="shadow.change_shadow(event,${c});">
                <div class="navigation" style="border-color:${b.color}">
                    <div class="left">
                        <a onclick="shadow.remove_shadow(${c})"><span class="material-symbols-rounded">close</span></a>
                        <a title="Inset" onclick="shadow.toggle_inset(${c});">${!0==b.inset?"<span class=\"material-symbols-rounded\">fullscreen_exit</span>":"<span class=\"material-symbols-rounded\">fullscreen</span>"}</a>
                        <div class="color">
                            <div class="clr-field color-picker-compact" style="color: ${b.color};">
                                <button type="button" aria-labelledby="clr-open-label"></button>
                                <input class="coloris" type="text" name="color" value="${b.color}" data-coloris="">
                            </div>
                        </div>
                    </div>
                    <div class="right">
                        <a onclick="$(this).parent().parent().next().slideToggle();"><span class="material-symbols-rounded">expand_more</span></a>
                    </div>
                </div>
                <div class="controls">
                    <div class="arrows">
                        <a onclick="shadow.move_shadow(${c},'up')"><span class="material-symbols-rounded">arrow_upward</span></a>
                        ${c+1}
                        <a onclick="shadow.move_shadow(${c},'down')"><span class="material-symbols-rounded">arrow_downward</span></a>
                    </div>
                    <div class="sliders">
                        <div class="input">
                            <span class="material-symbols-rounded">width</span>
                            <input class="slider" type="range" name="x" min="-50" max="50" value="${b.x}">
                            <input type="text" name="x" value="${b.x}">px
                        </div>
                        <div class="input">
                            <span class="material-symbols-rounded">height</span>
                            <input class="slider" type="range" name="y" min="-50" max="50" value="${b.y}">
                            <input type="text" name="y" value="${b.y}">px
                        </div>
                        <div class="input">
                            <span class="material-symbols-rounded">blur_on</span>
                            <input class="slider" type="range" name="blur" min="0" max="50" value="${b.blur}">
                            <input type="text" name="blur" value="${b.blur}">px
                        </div>
                        <div class="input">
                            <span class="material-symbols-rounded">circle</span>
                            <input class="slider" type="range" name="spread" min="0" max="50" value="${b.spread}">
                            <input type="text" name="spread" value="${b.spread}">px
                        </div>
                    </div>
                </div>
            </div>`,a},"");this.form_element.innerHTML=a}generate_css(){var a="box-shadow: ";a+=this.shadows.reduce(function(a,b){return a+=`${b.x}px ${b.y}px ${b.blur}px ${b.spread}px ${b.color} ${!0==b.inset?"inset":""},`,a},""),a=a.slice(0,-1),a+=";",this.css_element.innerHTML=a}render_shadows(){var a=this.shadows.reduce(function(a,b){return a+=`${b.x}px ${b.y}px ${b.blur}px ${b.spread}px ${b.color} ${!0==b.inset?"inset":""},`,a},"");a=a.slice(0,-1),this.elements=document.getElementsByClassName("shadow");for(var b=this.elements.length-1;0<=b;b--)this.elements[b].style.boxShadow=a}change_shadow(a,b){for(var c=a.target.value,d=a.target.parentNode.children,e=d.length-1;0<=e;e--)d[e].value=c;var f=a.target.name;this.shadows[b][f]=a.target.value,this.render_shadows(),this.generate_css()}toggle_inset(a){this.shadows[a].inset=!this.shadows[a].inset,this.render_form(),this.render_shadows()}add_shadow(){this.shadows.push({x:10,y:10,blur:10,spread:10,color:"#ffffff",inset:!1}),this.render_form(),this.render_shadows(),this.generate_css()}remove_shadow(a){this.shadows.pop(a),this.render_form(),this.render_shadows(),this.generate_css()}move_shadow(a,b){if("up"==b&&0!=a){var c=this.shadows.splice(a,1);this.shadows.splice(a-1,0,c[0])}if("down"==b&&a!=this.shadows.length){var c=this.shadows.splice(a,1);this.shadows.splice(a+1,0,c[0])}this.render_form(),this.render_shadows()}}